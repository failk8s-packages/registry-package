#@ load("@ytt:json", "json")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")

#@ if data.values.registry.auth.type == "htpasswd":

#@ registry_name = "registry.{}".format(data.values.domain)
#@ docker_auth = base64.encode("{}:{}".format(data.values.registry.auth.htpasswd.users[0].name, data.values.registry.auth.htpasswd.users[0].password))
#@ docker_creds = {"username": data.values.registry.auth.htpasswd.users[0].name, "password": data.values.registry.auth.htpasswd.users[0].password, "auth": docker_auth}

#@ def update_conf():
#@overlay/match missing_ok=True
auth:
  #@overlay/match missing_ok=True
  htpasswd:
    realm: in-cluster-registry
    path: /auth/htpasswd
#@ end

#@ def modify_conf(old, _):
#@   return yaml.encode(overlay.apply(yaml.decode(old), update_conf()))
#@ end

#@overlay/match by=overlay.subset({"kind": "ConfigMap"}),expects="1+"
---
data:
  #@overlay/replace via=modify_conf
  config.yml:

#@overlay/match by=overlay.subset({"kind":"Deployment", "metadata": {"name": "registry"}})
---
spec:
  template:
    spec:
      #@overlay/match missing_ok=True
      initContainers:
        - name: generate-htpasswd
          image: marcnuri/htpasswd:latest
          command: ["/bin/sh"]
          #@yaml/text-templated-strings
          args:
            [
              "-c",
              "touch /auth/htpasswd; htpasswd -Bb /auth/htpasswd (@= data.values.registry.auth.htpasswd.users[0].name @) (@= data.values.registry.auth.htpasswd.users[0].password @)",
            ]
          volumeMounts:
            - name: auth
              mountPath: /auth
      containers:
        #@overlay/match by="name"
        - name: registry
          volumeMounts:
            #@overlay/add
            - name: auth
              mountPath: /auth
              readOnly: true
      volumes:
        #@overlay/add
        - name: auth
          emptyDir: {}

#@overlay/match by=overlay.subset({"kind":"Secret", "metadata": {"name": "registry-creds"}})
---
#! Secret for registry in operator install as namespace needs to exist
data:
  .dockerconfigjson: #@ base64.encode(json.encode({"auths": {registry_name: docker_creds}}))

#@ end
